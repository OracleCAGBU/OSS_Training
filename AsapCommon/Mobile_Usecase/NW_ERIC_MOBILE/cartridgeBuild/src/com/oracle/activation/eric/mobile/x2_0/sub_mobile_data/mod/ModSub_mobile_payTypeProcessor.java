/**
 * TODO Copyright Notice
 */
package com.oracle.activation.eric.mobile.x2_0.sub_mobile_data.mod;

import com.oracle.activation.eric.mobile.x2_0.sub_mobile_data.mod.generated.*;

import com.mslv.studio.activation.implementation.IConnectionHandler;
import com.mslv.studio.activation.implementation.ILogger;
import com.mslv.studio.activation.implementation.IExitType;


/**
 * The ModSub_mobile_payTypeProcessor implements the business logic for performing the 
 * action on the device.  The processor will use the <i>input</i> parameters and <i>connection<i> to
 * execute commands on the device.  The Processor <i>execute</i> method is invoked to perform the task
 * following initialization using the <i>init</i> method.
 * <p>
 * Use of <b>MessageFormat</b> can dramatically simplify the composition of commands strings.
 * The static MessageFormat.format method can be used to populate a fixed format string 
 * with variables.  The MessageFormat tool provides some flexibility in formating the variables.
 * <code> 
 * String variable1 = "Test"; 
 * String variable2 = "Message";
 * 
 * Object[] args = {variable1, variable2}; 
 * 
 * String message = MessageFormat.format("CMD {0} {1}", args);
 * </code>
 *
 * @see MessageFormat#format(String, Object[])
 *
 */
public class ModSub_mobile_payTypeProcessor implements ModSub_mobile_payTypeProcessorInterface {

	/*
	 * The logger to use for all log information generated by this processor.
	 */
	private ILogger logger = null;

	/**
	 * The execute method is invoked by the Action Processor Proxy to perform the processing required to initiate 
	 * calls on the connection, sending commands to the device or Enterprise Information System (e.g. Element Management System).
	 *
	 * This method will populate output parameters as required.  Standard parameters will be populated on execution failure.
	 *
	 * Output Parameters (with exit type indicates FAIL):
	 *
	 *     - PARAMETER_ERROR                   populated with the error messaged or connection response related to the failure
	 *     - PARAMETER_VENDOR                 the Vendor this processor supports
	 *     - PARAMETER_TECHNOLOGY          the Technology this processor supports
	 *     - PARAMETER_SOFTWARE_LOAD   the Software Load this processor supports
	 *
	 * @param bean the bean containing the input parameters
	 * @param output the bean for populating output parameters
	 * @param connection a connection handle to use for communication
	 * @param exitType used to set the processor exit type and description
	 * @param systemParameters the bean containing system parameter information
	 *
	 * @see com.mslv.studio.activation.implementation.IConnectionHandler
	 * @see com.mslv.studio.activation.implementation.IExitType
	 */
	public void execute(ModSub_mobile_payTypeInput parms, ModSub_mobile_payTypeOutput output,
			IConnectionHandler connection, IExitType exitType, ISystemParameters systemParameters) throws Exception {

		/*
		 * TODO  Write the execution logic for the implementation, using the connection provided to issue commands to the device.
		 *		
		 *       - A logging sample is provided.  Note that entry/exit, connection message and parameter logging is done outside of the processor
		 *       - Sample code is provided to populate local variables with the parameters.  
		 *       - A simple call showing the use of the connection send request is also included.
		 *       - Standard exit type processing is included for setting typical output parameters.
		 */

		// TODO  Log intermediate steps of process execution. 
		logger.logDebug("execute() - Completed step A of execution.");

		// Sample code to extract the parameters from the Input bean.

		String mcli = parms.getMCLI();

		String iccid = parms.getICCID();

		String serviceplan = parms.getServicePlan();

		String name = parms.getName();

		String imsi = parms.getIMSI();

		String msisdn = parms.getMSISDN();

		String paytype = parms.getPayType();

		// TODO  Use the connection to send commands to the device.
		String response = connection.sendRequest("Test Message");

		// Use standard logic to check the response to set user defined exit types and populate the standard return parameters if required.
		String exitValue = exitType.setTypeByMatch(response,
				"No match found in exit types.  Applied default exit type.", IExitType.SUCCEED);

		if ((exitValue != null) && (exitValue.equals(IExitType.FAIL))) {
			output.addActionParameter(PARAMETER_ERROR, response);
			output.addActionParameter(PARAMETER_VENDOR, VENDOR);
			output.addActionParameter(PARAMETER_TECHNOLOGY, TECHNOLOGY);
			output.addActionParameter(PARAMETER_SOFTWARE_LOAD, SOFTWARE_LOAD);
		}

	}

	/**
	 * The init method is called prior to the execute method.  Additional initialization logic may be added as necessary.
	 *
	 * @param processor a reference to the underlying proxy processor.  Use of this parameter is strongly discouraged.
	 * @param logger a logging instance to be used for all processor logging.
	 */
	public void init(Object processor, ILogger logger) {
		this.logger = logger;
	}

}