/**
 * TODO Copyright Notice
 */
package com.orcl.activation.cisco.isp.x1_0.fiber_cpe.terminate;

import com.orcl.activation.cisco.isp.x1_0.IspConnectionHandler;
import com.orcl.activation.cisco.isp.x1_0.fiber_cpe.terminate.generated.*;
import com.orcl.activation.cisco.isp.x1_0.helper.ISPConstants;
import com.orcl.activation.cisco.isp.x1_0.helper.ISPHelper;
import com.orcl.activation.cisco.isp.x1_0.request.TerminateRequest;
import com.orcl.activation.cisco.isp.x1_0.request.TerminateRequest.Credential;
import com.orcl.activation.cisco.isp.x1_0.response.ProvisionResponse;
import com.orcl.activation.cisco.isp.x1_0.response.QueryResponse;
import com.orcl.activation.cisco.isp.x1_0.response.TerminateResponse;

import java.io.StringReader;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import com.mslv.activation.jinterpreter.JProcessor;
import com.mslv.studio.activation.implementation.IConnectionHandler;
import com.mslv.studio.activation.implementation.ILogger;
import com.mslv.studio.activation.implementation.IExitType;

public class TerminateFiber_cpeProcessor implements TerminateFiber_cpeProcessorInterface {

	/*
	 * The logger to use for all log information generated by this processor.
	 */
	private ILogger logger = null;
	private String responseCode = null;
	private String responseDesc = null;
	private JProcessor jproc=null;

	public void execute(TerminateFiber_cpeInput parms, TerminateFiber_cpeOutput output, IConnectionHandler connection,
			IExitType exitType, ISystemParameters systemParameters) throws Exception {

		ISPHelper ispHelper = new ISPHelper(); 
		try {

			logger.logDebug("RetrieveMacProcessor: execute() - Completed step A of execution.");
			logger.logDebug("JPROC CSDL_CMD "+jproc.getParam(ISPConstants.CSDL_CMD));

			IspConnectionHandler connHdlr = (IspConnectionHandler) connection;

			// Read input parameters
			String mcli = parms.getMCLI();
			String macAddress = parms.getMACAddress();

			// Check if parameter is not null or have no value
			ispHelper.isNotNull(macAddress, ISPConstants.MACAddress);

			// Construct Provision Request
			TerminateRequest terReq = new TerminateRequest();
			terReq.setAction(ISPConstants.ACTION_TERMINATE);
			terReq.setMACAddress(macAddress);

			Credential cred=new Credential();
			cred.setUser(connHdlr.getUserId());
			cred.setAuthentication(connHdlr.getPassword());

			terReq.setCredential(cred);

			String terReqStr = ispHelper.getRequestString(terReq);
			logger.logDebug("Terminate Request - " + terReqStr);

			TerminateResponse terRes=null;
			if (!systemParameters.isLoopback()) {

				String terResStr = connHdlr.sendRequest(terReqStr);

				Unmarshaller unmarshaller = JAXBContext.newInstance(TerminateResponse.class).createUnmarshaller();

				terRes = (TerminateResponse) unmarshaller.unmarshal(new StringReader(terResStr));

			}
			else {
				TerminateResponse resp=new TerminateResponse();
				resp.setDesc("SUCCESS");
				resp.setResult(0);

				String terResStr = ispHelper.getTerminateResponse(resp);
				logger.logDebug("Terminate response - " + terResStr);

				Unmarshaller unmarshaller = JAXBContext.newInstance(TerminateResponse.class).createUnmarshaller();

				terRes = (TerminateResponse) unmarshaller.unmarshal(new StringReader(terResStr));
			}
			int Result = terRes.getResult();

			responseCode = Integer.toString(Result);
			responseDesc = terRes.getDesc();
		}
		catch(Exception ex)
		{
			responseCode = ispHelper.getExceptionResponseCode(ex);
			responseDesc = ex.getMessage()+" in "+jproc.getParam(ISPConstants.CSDL_CMD);
			logger.logError("Exception occurred: "+ex.toString());
		}

		finally
		{
			String exitValue = exitType.setTypeByMatch(responseCode, 
					responseDesc, IExitType.FAIL);

			if ((exitValue != null) && (exitValue.equals(IExitType.FAIL))) {
				output.addActionParameter(PARAMETER_ERROR, responseDesc);
				output.addActionParameter(PARAMETER_VENDOR, VENDOR);
				output.addActionParameter(PARAMETER_TECHNOLOGY, TECHNOLOGY);
				output.addActionParameter(PARAMETER_SOFTWARE_LOAD, SOFTWARE_LOAD);
			}
		}
	}

	/**
	 * The init method is called prior to the execute method.  Additional initialization logic may be added as necessary.
	 *
	 * @param processor a reference to the underlying proxy processor.  Use of this parameter is strongly discouraged.
	 * @param logger a logging instance to be used for all processor logging.
	 */
	public void init(Object processor, ILogger logger) {
		this.logger = logger;
		//If connected to network set Loopback response
		//responseCode = ISPConstants.DEFAULT_SUCCESS_CODE;
		//responseDesc = ISPConstants.SUCCESS;

		if (processor instanceof JProcessor) {
			jproc = (JProcessor) processor;
		}	
	}

}